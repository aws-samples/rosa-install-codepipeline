# Secrets:
#The following secrets need to be configured in AWS Secrets Manager in the account

#ROSA_TOKEN="Please create this secret in secrets manager and set value to the token (OpenShift Cluster Manager API Token) obtained from: https://console.redhat.com/openshift/token/show "
#ROSA_CLUSTER_NAME=Please set this to a unique lowercase 15 character max name which will identify the cluster uniquely amongst all accounts

#The following secrets will be created and updated during the AWS CodePipeline run, it is possible to manually set these secrets if an override for the automated process for creating or updating secret is desired
#${ROSA_CLUSTER_NAME}-cluster-admin-pwd="This secrets is set to the value to the default cluster admin password prior to configuring LDAP, the LDAP idP can be removed from OpenShift Cluster Manager to re-enable this password"


# Cluster identifiers:
ROSA_CLUSTER_NAME=rosa1
ROSA_CLUSTER_VERSION=4.10.26
ROSA_CLUSTER_OPER_ROLE_PREFIX=rosa1-operrole
#ROSA_CLUSTER_CLUSTER_CREATE_DRY_RUN=If set to true, the cluster will be not be actually created, but a dry run will be executed with the rosa commandline
ROSA_CLUSTER_CLUSTER_CREATE_DRY_RUN=
#ROSA_CLUSTER_KMS_KEY_ARN=The customer specified KMS key ARN used during cluster creation for control plane data volumes and data plane persistent volumes, see: https://docs.openshift.com/rosa/rosa_getting_started_sts/rosa_creating_a_cluster_with_sts/rosa-sts-creating-a-cluster-with-customizations.html and https://access.redhat.com/articles/6155612
#ROSA_CLUSTER_COMPUTE_MACHINE_TYPE specifies the AWS ROSA Worker Node machine type, if not specified, by default it is set to m5.xlarge
ROSA_CLUSTER_COMPUTE_MACHINE_TYPE=

# Auto scaling configuration:

ROSA_CLUSTER_ENABLE_AUTOSCALING=
ROSA_CLUSTER_MIN_REPLICAS=3
ROSA_CLUSTER_MAX_REPLICAS=6

# Network configuration:

#ROSA_CLUSTER_HOST_PREFIX=This CIDR should match the CIDR for the ROSA VPC, if set empty, the automation queries any vpc with a Name containing the string "rosa" and sets it to the VPC's CIDR
ROSA_CLUSTER_MACHINE_CIDR=
#ROSA_CLUSTER_SERVICE_CIDR=This CIDR is used for IP addresses assigned to Kubernetes services created in ROSA, must be different from CIDRs used in other VPCs so that pods communicating into the private network don't get IP address conflicts
ROSA_CLUSTER_SERVICE_CIDR=10.65.0.0/16
#ROSA_CLUSTER_POD_CIDR=This CIDR is used for IP addresses assigned to Kubernetes pods created in ROSA, must be different from CIDRs used in other VPCs so that pods communicating into the private network don't get IP address conflicts
ROSA_CLUSTER_POD_CIDR=10.64.0.0/16
#ROSA_CLUSTER_HOST_PREFIX=This prefix determines the maximum number of IP addresses that can be allocated to pods in a ROSA worker node, e.g. if host prefix is set to "23", then each node is assigned a /23 subnet out of the given CIDR
ROSA_CLUSTER_HOST_PREFIX=23
#ROSA_SUBNET1,2,3=This is subnet id in an availability zone in the ROSA VPC, if set empty, the automation queries any vpc with a Name containing the string "rosa" and finds at least one subnet in that VPC
ROSA_SUBNET1=
ROSA_SUBNET2=
ROSA_SUBNET3=
#ROSA_CLUSTER_MULTI_AZ=If Set to Y, then the cluster is deployed accross three Availability Zones (AZ), if not set, then the cluster is deployed to only one AZ
ROSA_CLUSTER_MULTI_AZ=Y
#AWS_ACCOUNT_ROSA_VPC_ID=The AWS Virtual Private Cloud (VPC) id in which the ROSA cluster will be created, if set to empty, the automation queries a vpc with a Name containing the string "rosa" and sets it to the VPC's ID
AWS_ACCOUNT_ROSA_VPC_ID=

#AWS_SHARED_SERVICES_VPC_ID=The VPC id from where the ROSA installation CodePipeline will be executed, this VPC will be authorized to access the domains associated with the ROSA cluster
AWS_SHARED_SERVICES_VPC_ID=

#OpenShift Project configuration

ROSA_PROJECT=default

#TRIGGER=Y

